#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

#import scipy.interpolate
import glob
import json
import matplotlib.pyplot as pl
import multiprocessing
import numpy as np
import re
import scipy.optimize as op
import scipy.signal
import sys
import unitprint

savefig_options = {
    'bbox_inches': 'tight',
}

def polynom(x, a, b, c, d):
    return a + b*x + c*x**2 + d*x**3

def job_magnetfeldkalibrierung(T):
    data = np.genfromtxt('Messdaten/Magnetfeldkalibrierung_1.txt', skip_header=1)
    I = data[:, 2]
    B = data[:, 1] * 10**-3

    used = I < 8

    I_used = I[used]
    B_used = B[used]

    popt, pconv = op.curve_fit(polynom, I_used, B_used)
    fit_x = np.linspace(np.min(I_used), np.max(I_used))
    fit_y = polynom(fit_x, *popt)

    pl.plot(I_used, B_used, linestyle='none', marker='+', label='Messdaten')
    pl.plot(fit_x, fit_y, label='Anpassung')
    pl.xlabel(r'$I / \mathrm{A}$')
    pl.ylabel(r'$B / \mathrm{T}$')
    pl.legend(loc='best')
    pl.grid(True)
    pl.savefig('_build/Magnetfeldkalibrierung.pdf', **savefig_options)
    pl.clf()

    return popt

def job_(T):
    files = glob.glob('Messdaten/Mit_*.txt')
    pattern = re.compile('Messdaten/Mit_(\d+(.\d+)?).txt')
    for file_ in files:
        m = pattern.match(file_)
        if m:
            print(m.group(1))

def main():
    with multiprocessing.Manager() as manager:
        T = manager.dict()

        l = globals()
        to_run = []
        for key, value in l.items():
            if key.startswith('job_'):
                to_run.append(value)

        print('Will run the following functions:')
        for f in to_run:
            print('-', f)

        processes = []
        for f in to_run:
            p = multiprocessing.Process(target=f, args=(T,))
            print("Starting", p)
            p.start()
            processes.append(p)

        for p in processes:
            print("Waiting for", p)
            p.join()

        print("Serializing …")

        with open('_build/template.js', 'w') as f:
            json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
