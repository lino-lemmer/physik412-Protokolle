#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

#import scipy.interpolate
import colorsys
import fractions
import itertools
import json
import matplotlib.pyplot as pl
import multiprocessing
import numpy as np
import operator
import scipy.ndimage
import scipy.optimize as op
import scipy.signal
import sys
import unitprint

savefig_options = {
    'bbox_inches': 'tight',
}

def job_zimmertemperatur(T):
    results1 = []
    results2 = []

    for probe, prefix_s, filename_s, prefix_h, filename_h in zip(
        [r'\probeA', r'\probeB'],
        ['hf_540_strom_', 'hf_301_strom_'],
        ['Messdaten/InAs-HF-540-Zimmertemperatur-Strom.txt', 'Messdaten/InAs-HF-301-040-Zimmertemperatur-Strom.txt'],
        ['hf_540_hall_', 'hf_301_hall_'],
        [ 'Messdaten/InAs-HF-540-Zimmertemperatur-Hall.txt', 'Messdaten/InAs-HF-301-040-Zimmertemperatur-Hall.txt'],
    ):
        sr = strom(T, prefix_s, filename_s)
        hr = hall_mit_nullfeld(T, prefix_h, filename_h)

        sigma_val = 1 / sr[0]
        sigma_err = 1 / sr[0]**2 * sr[1]

        mu_val = abs(sr[0] * hr[4])
        mu_err = np.sqrt(
            (sr[0] * hr[5])**2
            + (sr[1] * hr[4])**2
        )

        p_val = 1 / (hr[4] * 1.609e-19)
        p_err = abs(1 / (hr[4]**2 * 1.609e-19) * hr[5])

        results1.append([
            probe,
            unitprint.siunitx(sigma_val / 10**-3, sigma_err / 10**-3),
            unitprint.siunitx(mu_val, mu_err),
            unitprint.siunitx(p_val / 1e15, p_err / 1e15),
        ])
        results2.append([
            probe,
            unitprint.siunitx(*hr[0:2]), unitprint.siunitx(*hr[2:4]),
            unitprint.siunitx(*hr[4:6]),
        ])

    T['zimmertemperatur_tabelle1'] = results1
    T['zimmertemperatur_tabelle2'] = results2

def job_temperatur(T):
    temp_data = np.genfromtxt('Messdaten/Temperaturen.txt')
    T_val = temp_data[:, 0] + temp_data[:, 2] - 20 + 273
    T_err = temp_data[:, 1]
    rho = strom(T, 'strom_', 'Messdaten/Strom.txt')[-1]
    rh = hall_mit_nullfeld(T, 'hall_', 'Messdaten/Hall.txt')[-1]

    p = 1 / (rh * 1.609e-19)
    sigma = 1 / rho
    mu = rh * rho

    pl.plot(1/T_val, np.log(sigma), linestyle='none', marker='+')
    pl.grid(True)
    pl.xlabel(r'$T^{-1}$')
    pl.ylabel(r'$\ln(\sigma)$')
    pl.savefig('_build/plot1.pdf')
    pl.clf()

    pl.plot(1/T_val, np.log(p / 10**17), linestyle='none', marker='+')
    pl.grid(True)
    pl.xlabel(r'$T^{-1} / \mathrm{K^{-1}}$')
    pl.ylabel(r'$\ln(p / 10^{17})$')
    pl.savefig('_build/plot2.pdf')
    pl.clf()

    pl.plot(np.log(T_val), np.log(mu), linestyle='none', marker='+')
    pl.grid(True)
    pl.xlabel(r'$\ln(T)$')
    pl.ylabel(r'$\ln(\mu)$')
    pl.savefig('_build/plot3.pdf')
    pl.clf()

    T['temperatur_tabelle'] = list(zip(
        unitprint.siunitx(T_val, T_err),
        unitprint.siunitx(sigma / 10**-3),
        unitprint.siunitx(rh),
        unitprint.siunitx(p / 10**15),
        unitprint.siunitx(mu),
    ))

def strom(T, prefix, messdaten):
    data = np.genfromtxt(messdaten)
    n = data[:, 0]
    V = data[:, 1] * 10**-3

    I = 13.601e-3

    T['I_mA'] = unitprint.siunitx(I / 10**-3)

    R1234 = abs(V[n==1] - V[n==2]) / (2 * I)
    R2341 = abs(V[n==3] - V[n==4]) / (2 * I)

    rho1 = np.pi / np.log(2) * (R1234 + R2341) / 2

    R3412 = abs(V[n==3] - V[n==4]) / (2 * I)
    R4132 = abs(V[n==4] - V[n==1]) / (2 * I)
    rho2 = np.pi / np.log(2) * (R3412 + R4132) / 2

    rho = (rho1 + rho2) / 2

    rho_val = np.mean(rho)
    rho_err = np.std(rho)

    sigma_val = 1/rho_val
    sigma_err = 1/rho_val**2 * rho_err

    digits = 4

    T[prefix+'R_tabelle'] = list(zip(
        unitprint.siunitx(R1234, digits=digits),
        unitprint.siunitx(R2341, digits=digits),
        unitprint.siunitx(R3412, digits=digits),
        unitprint.siunitx(R4132, digits=digits),
        unitprint.siunitx(R1234/R2341, digits=digits),
        unitprint.siunitx(R3412/R4132, digits=digits),
    ))
    T[prefix+'rho_tabelle'] = list(zip(
        unitprint.siunitx(rho1, digits=digits),
        unitprint.siunitx(rho2, digits=digits),
        unitprint.siunitx(rho, digits=digits),
    ))
    T[prefix+'rho'] = unitprint.siunitx(rho_val, rho_err)
    T[prefix+'sigma'] = unitprint.siunitx(sigma_val / 10**-3, sigma_err / 10**-3)

    return rho_val, rho_err, rho

def hall_mit_nullfeld(T, prefix, messdaten):
    data = np.genfromtxt(messdaten)
    n = data[:, 0]
    V = data[:, 1] * 10**-3

    I = 13.601e-3

    B = 0.138

    dV_A = V[n==1] - V[n==9]
    dV_B = V[n==2] - V[n==10]
    dV_C = V[n==5] - V[n==9]
    dV_D = V[n==6] - V[n==10]

    V_H_plus = (dV_A - dV_B) / 2
    V_H_minus = (dV_C - dV_D) / 2

    R_H_plus = V_H_plus / (B * I)
    R_H_minus = - V_H_minus / (B * I)

    digits = 4

    T[prefix+'V_tabelle_mV'] = list(zip(
        unitprint.siunitx(dV_A / 10**-3, digits=digits),
        unitprint.siunitx(dV_B / 10**-3, digits=digits),
        unitprint.siunitx(dV_C / 10**-3, digits=digits),
        unitprint.siunitx(dV_D / 10**-3, digits=digits),
    ))
    T[prefix+'V_R_tabelle'] = list(zip(
        unitprint.siunitx(V_H_plus / 10**-3, digits=digits),
        unitprint.siunitx(V_H_minus / 10**-3, digits=digits),
        unitprint.siunitx(R_H_plus, digits=digits),
        unitprint.siunitx(R_H_minus, digits=digits),
    ))

    R_H_plus_val = np.mean(R_H_plus)
    R_H_plus_err = np.std(R_H_plus)
    T[prefix+'R_H_plus'] = unitprint.siunitx(R_H_plus_val, R_H_plus_err)

    R_H_minus_val = np.mean(R_H_minus)
    R_H_minus_err = np.std(R_H_minus)
    T[prefix+'R_H_minus'] = unitprint.siunitx(R_H_minus_val, R_H_minus_err)

    R_H1 = 1 / (B * I) * ((V[n==1] - V[n==2]) - (V[n==5] - V[n==6])) / 4
    R_H2 = 1 / (B * I) * ((V[n==3] - V[n==4]) - (V[n==7] - V[n==8])) / 4

    R_H = (R_H1 + R_H2) / 2

    T[prefix+'RH_mit_tabelle'] = list(zip(
        unitprint.siunitx(R_H1, digits=digits),
        unitprint.siunitx(R_H2, digits=digits),
        unitprint.siunitx(R_H, digits=digits),
    ))

    R_H_val = np.mean(R_H)
    R_H_err = np.std(R_H)

    T[prefix+'R_H'] = unitprint.siunitx(R_H_val, R_H_err)

    return R_H_plus_val, R_H_plus_err, R_H_minus_val, R_H_minus_err, R_H_val, R_H_err, R_H

def main():
    with multiprocessing.Manager() as manager:
        T = manager.dict()

        l = globals()
        to_run = []
        for key, value in l.items():
            if key.startswith('job_'):
                to_run.append(value)

        print('Will run the following functions:')
        for f in to_run:
            print('-', f)

        processes = []
        for f in to_run:
            p = multiprocessing.Process(target=f, args=(T,))
            print("Starting", p)
            p.start()
            processes.append(p)

        for p in processes:
            print("Waiting for", p)
            p.join()

        print("Serializing …")

        with open('_build/template.js', 'w') as f:
            json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
