#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

#import scipy.interpolate
import colorsys
import fractions
import itertools
import json
import matplotlib.pyplot as pl
import multiprocessing
import numpy as np
import operator
import scipy.ndimage
import scipy.optimize as op
import scipy.signal
import sys
import unitprint

savefig_options = {
    'bbox_inches': 'tight',
}

def job_hf_540(T):
    strom(T, 'hf_540_strom_', 'Messdaten/InAs-HF-540-Zimmertemperatur-Strom.txt')
    strom(T, 'hf_301_strom_', 'Messdaten/InAs-HF-301-040-Zimmertemperatur-Strom.txt')

def strom(T, prefix, messdaten):
    data = np.genfromtxt(messdaten)
    n = data[:, 0]
    V = data[:, 1] * 10**-3

    I = 13.601e-3

    R1234 = abs(V[n==1] - V[n==2]) / (2 * I)
    R2341 = abs(V[n==3] - V[n==4]) / (2 * I)

    rho1 = np.pi / np.log(2) * (R1234 + R2341) / 2

    R3412 = abs(V[n==3] - V[n==4]) / (2 * I)
    R4132 = abs(V[n==4] - V[n==1]) / (2 * I)
    rho2 = np.pi / np.log(2) * (R3412 + R4132) / 2

    rho = (rho1 + rho2) / 2

    rho_val = np.mean(rho)
    rho_err = np.std(rho)

    digits = 4

    T[prefix+'R_tabelle'] = list(zip(
        unitprint.siunitx(R1234, digits=digits),
        unitprint.siunitx(R2341, digits=digits),
        unitprint.siunitx(R3412, digits=digits),
        unitprint.siunitx(R4132, digits=digits),
        unitprint.siunitx(R1234/R2341, digits=digits),
        unitprint.siunitx(R3412/R4132, digits=digits),
    ))
    T[prefix+'rho_tabelle'] = list(zip(
        unitprint.siunitx(rho1, digits=digits),
        unitprint.siunitx(rho2, digits=digits),
        unitprint.siunitx(rho, digits=digits),
    ))
    T[prefix+'rho'] = unitprint.siunitx(rho_val, rho_err)

def main():
    with multiprocessing.Manager() as manager:
        T = manager.dict()

        l = globals()
        to_run = []
        for key, value in l.items():
            if key.startswith('job_'):
                to_run.append(value)

        print('Will run the following functions:')
        for f in to_run:
            print('-', f)

        processes = []
        for f in to_run:
            p = multiprocessing.Process(target=f, args=(T,))
            print("Starting", p)
            p.start()
            processes.append(p)

        for p in processes:
            print("Waiting for", p)
            p.join()

        print("Serializing …")

        with open('_build/template.js', 'w') as f:
            json.dump(dict(T), f, indent=4, sort_keys=True)

if __name__ == "__main__":
    main()
