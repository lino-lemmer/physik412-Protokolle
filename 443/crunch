#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import itertools
import jinja2
import matplotlib.pyplot as pl
import numpy as np
import scipy.interpolate
import scipy.optimize as op
import sys
import scipy.signal

import unitprint

def punkte_aus_bild(dateiname):
    bild = pl.imread(dateiname)
    schwarze_punkte = [
        (x, y)
        for y, row in zip(itertools.count(), bild)
        for x, val in zip(itertools.count(), row)
        if val < 0.5
    ]

    a = np.array(schwarze_punkte)
    x = a[:, 0] - a[:, 0].min()
    # In einem Bild sind die Achsen, anders, daher müssen diese noch umgekehrt
    # werden.
    y = a[:, 1].max() - a[:, 1]

    points = {}

    for x_, y_ in zip(x, y):
        if not x_ in points:
            points[x_] = []
        points[x_].append(y_)

    final_x = []
    final_y = []
    final_y_err = []

    for x_, y_list in sorted(points.items()):
        final_x.append(x_)
        final_y.append(np.mean(np.array(y_list)))
        final_y_err.append(np.std(np.array(y_list)))

    final_x = np.array(final_x)
    final_y = np.array(final_y)
    final_y_err = np.array(final_y_err)

    pl.errorbar(final_x, final_y, yerr=final_y_err, linestyle='none', marker='.')

    return final_x, final_y

def peaks_aus_bild(dateiname):
    x, y = punkte_aus_bild(dateiname)

    peak_indizes = scipy.signal.find_peaks_cwt(y, np.array([10, ]))
    peak_indizes = np.array(peak_indizes)
    peak_indizes[0] = np.argmax(y)

    pl.plot(x[peak_indizes], y[peak_indizes], color='red', marker='o')
    pl.grid(True)
    pl.clf()

def rabi_fit_gelb(x, a, b):
    return a*np.abs(np.sin(b*x))

def rabi_fit_gruen(x, a, b):
    return a*np.sin(b*x)

def long_relaxation_sat(tau, M_0, T):
    return M_0*(1-np.exp(-tau/T))

def long_relaxation_pol(tau, M_0, T):
    return M_0*(1-2*np.exp(-tau/T))

def trans_relaxation(tau, M_0, T, Off):
    return M_0*np.exp(-tau/T)+Off

def rabi(T):
    data = np.genfromtxt("Messdaten/Rabi.txt")

    f = data[:, 0]*1e-6 # jetzt in MHz
    A_len = data[:, 1]*1e6 # jetzt in Microsekunden
    gelb_val = data[:, 2]
    gelb_err = data[:, 3]
    gruen_val = data[:, 4]
    gruen_err = data[:, 5]

    T['rabi_messdaten'] = zip(
        unitprint.siunitx(f),
        unitprint.siunitx(A_len),
        unitprint.siunitx(gelb_val, gelb_err),
        unitprint.siunitx(gruen_val, gruen_err),
    )

    # Fit
    popt_gelb, pconv_gelb = op.curve_fit(rabi_fit_gelb, A_len, gelb_val, (1., 3.1416/5.))
    popt_gruen, pconv_gruen = op.curve_fit(rabi_fit_gruen, A_len, gruen_val, (1., 3.1416/5.))
    A_len = A_len * 1e-6 # wieder Sekunden
    popt_gelb[1] = popt_gelb[1]*1e6
    popt_gruen[1] = popt_gruen[1]*1e6
    x = np.linspace(0., np.max(A_len), 1000)
    y_gelb = rabi_fit_gelb(x, *popt_gelb)
    y_gruen = rabi_fit_gruen(x, *popt_gruen)

    pl.errorbar(A_len, gelb_val, yerr=gelb_err, marker='+', linestyle='none', label='Gelb', color='blue')
    pl.errorbar(A_len, gruen_val, yerr=gruen_err, marker='+', linestyle='none', label='In-Phase-Signal', color='green')
    pl.plot(x, y_gelb, color='blue')
    pl.plot(x, y_gruen, color='green')
    pl.grid(True)
    pl.legend(loc='best')
    pl.title('Rabi-Oszillation')
    pl.xlabel(r'A_len / s')
    pl.ylabel(r'Signal / V')
    pl.savefig('_build/Rabi.pdf')
    pl.clf()

def saettigung(T):
    data = np.genfromtxt('Messdaten/Saettigung.txt')
    tau = data[:, 0]
    M_val = data[:, 1]
    M_err = data[:, 2]

    popt_mit, pconv_mit = op.curve_fit(long_relaxation_sat, tau, M_val, (7., .1))
    x = np.linspace(np.min(tau), np.max(tau), 500)
    y_mit = long_relaxation_sat(x, *popt_mit)

    pl.errorbar(tau, M_val, yerr=M_err, linestyle='none', marker='+')
    pl.plot(x,y_mit, label=r'Anpassungsfunktion')
    pl.title('Sättigungs-Zurückgewinnung')
    pl.xlabel(r"$\tau / \mathrm{s}$")
    pl.ylabel(r"$M / \mathrm{V}$")
    pl.legend(loc='best')
    pl.grid(True)
    pl.savefig('_build/Saettigung.pdf')
    pl.clf()

    T['M_0_sat'] = unitprint.siunitx(popt_mit[0], np.sqrt(pconv_mit[0,0]))
    print('M_0_sat:', popt_mit[0], np.sqrt(pconv_mit[0,0]))
    T['T_1_sat'] = unitprint.siunitx(popt_mit[1], np.sqrt(pconv_mit[1,1]))
    print('T_1_sat:', popt_mit[1], np.sqrt(pconv_mit[1,1]))
    T['Tabelle_Saettigung'] = zip(
            unitprint.siunitx(tau),
            unitprint.siunitx(M_val, M_err)
            )

def polarisation(T):
    data = np.genfromtxt('Messdaten/Polarisation.txt')
    tau = data[:, 0]
    M_val = data[:, 1]
    M_err = data[:, 2]

    popt, pconv = op.curve_fit(long_relaxation_pol, tau, M_val, (8., .1))
    x = np.linspace(np.min(tau), np.max(tau), 500)
    y = long_relaxation_pol(x, *popt)

    pl.errorbar(tau, M_val, yerr=M_err, linestyle='none', marker='+')
    pl.plot(x,y)
    pl.title('Polarisations-Zurückgewinnung')
    pl.xlabel(r"$\tau / \mathrm{s}$")
    pl.ylabel(r"$M / \mathrm{V}$")
    pl.grid(True)
    pl.savefig('_build/Polarisation.pdf')
    pl.clf()

    T['M_0_pol'] = unitprint.siunitx(popt[0], np.sqrt(pconv[0,0]))
    print('M_0_pol:', popt[0], np.sqrt(pconv[0,0]))
    T['T_1_pol'] = unitprint.siunitx(popt[1], np.sqrt(pconv[1,1]))
    print('T_1_pol:', popt[1], np.sqrt(pconv[1,1]))

    T['Tabelle_Polarisation'] = zip(
            unitprint.siunitx(tau),
            unitprint.siunitx(M_val, M_err)
            )

def effektiv(T):
    data = np.loadtxt(
        open('Messdaten/print_004.csv', "rb"),
        delimiter=",",
        skiprows=2
    )

    t = data[:, 0]
    M = data[:, 1]

    tM = np.array([
        (t1, M1)
        for t1, M1 in zip(t, M)
        if M1 > 0.5
    ])

    t = tM[:, 0]
    M = tM[:, 1]

    popt, pconv = op.curve_fit(trans_relaxation, t, M, (8., 1., .5))
    x = np.linspace(np.min(t), np.max(t))
    y = trans_relaxation(x, *popt)

    pl.plot(t, M, linestyle='none', marker='x')
    pl.plot(x,y)
    pl.title('Effektive transversale Relaxation')
    pl.grid(True)
    pl.xlabel(r"$t / \mathrm{s}$")
    pl.ylabel(r"$M / \mathrm{V}$")
    pl.savefig('_build/effektiv.pdf')
    pl.clf()

    T['T_eff'] = unitprint.siunitx(popt[1], np.sqrt(pconv[1,1]))
    print('T_eff:', popt[1], np.sqrt(pconv[1,1]))

    t1 = t[:len(t)/6]*1000
    t2 = t[len(t)/6:2*len(t)/6]*1000
    t3 = t[2*len(t)/6:3*len(t)/6]*1000
    t4 = t[3*len(t)/6:4*len(t)/6]*1000
    t5 = t[4*len(t)/6:5*len(t)/6]*1000
    t6 = t[5*len(t)/6:]*1000
    M1 = M[:len(M)/6]
    M2 = M[len(M)/6:2*len(M)/6]
    M3 = M[2*len(M)/6:3*len(M)/6]
    M4 = M[3*len(M)/6:4*len(M)/6]
    M5 = M[4*len(M)/6:5*len(t)/6]
    M6 = M[5*len(M)/6:]

    T['Tabelle_Effektiv'] = zip(
            unitprint.siunitx(t1),
            unitprint.siunitx(M1),
            unitprint.siunitx(t2),
            unitprint.siunitx(M2),
            unitprint.siunitx(t3),
            unitprint.siunitx(M3),
            unitprint.siunitx(t4),
            unitprint.siunitx(M4),
            unitprint.siunitx(t5),
            unitprint.siunitx(M5),
            unitprint.siunitx(t6),
            unitprint.siunitx(M6)
            )

def hahn(T):
    data = np.genfromtxt('Messdaten/Hahn.txt')
    tau = data[:, 0]
    M_val = data[:, 1]
    M_err = data[:, 2]

    popt, pconv = op.curve_fit(trans_relaxation, tau, M_val, (8., 1., .5))
    x = np.linspace(np.min(tau), np.max(tau),100)
    y = trans_relaxation(x, *popt)

    pl.errorbar(tau, M_val, yerr=M_err, linestyle='none', marker='+')
    pl.plot(x, y)
    pl.title('Hahn-Spinecho')
    pl.xlabel(r"$t / \mathrm{s}$")
    pl.ylabel(r"$M / \mathrm{V}$")
    pl.grid(True)
    pl.savefig('_build/Hahn.pdf')
    pl.clf()

    T['T_2_hahn'] = unitprint.siunitx(popt[1], np.sqrt(pconv[1,1]))

    print('T_2_hahn:', popt[1], np.sqrt(pconv[1,1]))

    T['Tabelle_Hahn'] = zip(
            unitprint.siunitx(tau),
            unitprint.siunitx(M_val, M_err)
            )

def pickup(T):
    data = np.loadtxt(
        open('Messdaten/print_001.csv', "rb"),
        delimiter=",",
        skiprows=2
    )

    t = data[:, 0]
    M = data[:, 1]

    pl.plot(t, M, label='Messpunkte')
    pl.title('Optimierte Pickup-Probe')
    pl.xlabel(r"$t / \mathrm{s}$")
    pl.ylabel(r"$M / \mathrm{V}$")
    pl.grid(True)
    pl.savefig('_build/Pickup.pdf')
    pl.clf()

def render_template(T, filename):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template = env.get_template("Template.tex")

    # Rendering LaTeX document with values.
    with open(filename, "w") as f:
        f.write(template.render(**T))

def main():
    T = {}

    peaks_aus_bild('Messdaten/qfile_004.png')
    sys.exit(0)

    rabi(T)
    saettigung(T)
    polarisation(T)
    effektiv(T)
    hahn(T)
    pickup(T)

    if len(sys.argv) > 1:
        render_template(T, sys.argv[1])
    else:
        print('Keine Ausgabe, da Dateiname fehlt.')

if __name__ == "__main__":
    main()
