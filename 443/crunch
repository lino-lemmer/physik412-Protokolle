#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import jinja2
import matplotlib.pyplot as pl
import numpy as np
import scipy.interpolate
import scipy.optimize as op
import sys

import unitprint

def rabi(T):
    data = np.genfromtxt("Messdaten/Rabi.txt")

    f = data[:, 0]
    A_len = data[:, 1]
    gelb_val = data[:, 2]
    gelb_err = data[:, 3]
    gruen_val = data[:, 4]
    gruen_err = data[:, 5]

    pl.errorbar(A_len, gelb_val, yerr=gelb_err, marker='+', linestyle='none', label='Gelb')
    pl.errorbar(A_len, gruen_val, yerr=gruen_err, marker='+', linestyle='none', label='Grün')
    pl.grid(True)
    pl.legend(loc='best')
    pl.title('Rabi-Oszillation')
    pl.xlabel(r'A_len / s')
    pl.ylabel(r'Signal / V')
    pl.savefig('_build/Rabi.pdf')
    pl.clf()

    T['rabi_messdaten'] = zip(
        unitprint.siunitx(f),
        unitprint.siunitx(A_len),
        unitprint.siunitx(gelb_val, gelb_err),
        unitprint.siunitx(gruen_val, gruen_err),
    )

def saettigung(T):
    data = np.genfromtxt('Messdaten/Saettigung.txt')
    tau = data[:, 0]
    M_val = data[:, 1]
    M_err = data[:, 2]

    pl.errorbar(tau, M_val, yerr=M_err, linestyle='none', marker='+')
    pl.title('Sättigungs-Zurückgewinnung')
    pl.grid(True)
    pl.savefig('_build/Saettigung.pdf')
    pl.clf()

def polarisation(T):
    data = np.genfromtxt('Messdaten/Polarisation.txt')
    tau = data[:, 0]
    M_val = data[:, 1]
    M_err = data[:, 2]

    pl.errorbar(tau, M_val, yerr=M_err, linestyle='none', marker='+')
    pl.title('Polarisations-Zurückgewinnung')
    pl.grid(True)
    pl.savefig('_build/Polarisation.pdf')
    pl.clf()

def render_template(T, filename):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template = env.get_template("Template.tex")

    # Rendering LaTeX document with values.
    with open(filename, "w") as f:
        f.write(template.render(**T))

def main():
    T = {}

    rabi(T)
    saettigung(T)
    polarisation(T)

    if len(sys.argv) > 1:
        render_template(T, sys.argv[1])
    else:
        print('Keine Ausgabe, da Dateiname fehlt.')

if __name__ == "__main__":
    main()
