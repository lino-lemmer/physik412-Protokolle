#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2013 Martin Ueding <dev@martin-ueding.de>
# Licensed under The GNU Public License Version 2 (or later)

import jinja2
import matplotlib.pyplot as pl
import numpy as np
import scipy.interpolate
import scipy.optimize as op
import sys

import unitprint

def rabi_fit_gelb(x, a, b):
    return a*np.abs(np.sin(b*x))

def rabi_fit_gruen(x, a, b):
    return a*np.sin(b*x)

def rabi(T):
    data = np.genfromtxt("Messdaten/Rabi.txt")

    f = data[:, 0]*1e-6 # jetzt in MHz
    A_len = data[:, 1]*1e6 # jetzt in Microsekunden
    gelb_val = data[:, 2]
    gelb_err = data[:, 3]
    gruen_val = data[:, 4]
    gruen_err = data[:, 5]

    T['rabi_messdaten'] = zip(
        unitprint.siunitx(f),
        unitprint.siunitx(A_len),
        unitprint.siunitx(gelb_val, gelb_err),
        unitprint.siunitx(gruen_val, gruen_err),
    )

    # Fit
    popt_gelb, pconv_gelb = op.curve_fit(rabi_fit_gelb, A_len, gelb_val, (1., 3.1416/5.))
    popt_gruen, pconv_gruen = op.curve_fit(rabi_fit_gruen, A_len, gruen_val, (1., 3.1416/5.))
    A_len = A_len * 1e-6 # wieder Sekunden
    popt_gelb[1] = popt_gelb[1]*1e6
    popt_gruen[1] = popt_gruen[1]*1e6
    x = np.linspace(0., np.max(A_len), 200)
    y_gelb = rabi_fit_gelb(x, *popt_gelb)
    y_gruen = rabi_fit_gruen(x, *popt_gruen)

    pl.errorbar(A_len, gelb_val, yerr=gelb_err, marker='+', linestyle='none', label='Gelb', color='yellow')
    pl.errorbar(A_len, gruen_val, yerr=gruen_err, marker='+', linestyle='none', label='Grün', color='green')
    pl.plot(x, y_gelb, color='yellow')
    pl.plot(x, y_gruen, color='green')
    pl.grid(True)
    pl.legend(loc='best')
    pl.title('Rabi-Oszillation')
    pl.xlabel(r'A_len / s')
    pl.ylabel(r'Signal / V')
    pl.savefig('_build/Rabi.pdf')

def render_template(T, filename):
    # Setting up Jinja
    env = jinja2.Environment(
        "%<", ">%",
        "<<", ">>",
        "%§", "§%",
        loader=jinja2.FileSystemLoader(".")
    )
    template = env.get_template("Template.tex")

    # Rendering LaTeX document with values.
    with open(filename, "w") as f:
        f.write(template.render(**T))

def main():
    T = {}

    rabi(T)

    render_template(T, sys.argv[1])

if __name__ == "__main__":
    main()
